df$isodecimal
iso64bitleft_to_isodecimal(df$iso64bitleft)
iso64bitright_to_isodecimal(df$iso64bitright)
isodecimal_to_isodothex(df$isodecimal)
isodecimal_to_iso64bitleft(df$isodecimal)
isodecimal_to_iso64bitright(df$isodecimal)
df <- data.frame(isodecimal = c('999012345678901','999012345678902','999012345678903','999012345678904','999012345678905','999012345678906','999012345678907','999012345678908','999012345678909','999012345678910'),
isodothex = c('3E7.02DFDC1C35','3E7.02DFDC1C36','3E7.02DFDC1C37','3E7.02DFDC1C38','3E7.02DFDC1C39','3E7.02DFDC1C3A','3E7.02DFDC1C3B','3E7.02DFDC1C3C','3E7.02DFDC1C3D','3E7.02DFDC1C3E'),
iso64bitleft = c('8000F9C2DFDC1C35','8000F9C2DFDC1C36','8000F9C2DFDC1C37','8000F9C2DFDC1C38','8000F9C2DFDC1C39','8000F9C2DFDC1C3A','8000F9C2DFDC1C3B','8000F9C2DFDC1C3C','8000F9C2DFDC1C3D','8000F9C2DFDC1C3E'),
iso64bitright = c('AC383BFB439F0001','6C383BFB439F0001','EC383BFB439F0001','1C383BFB439F0001','9C383BFB439F0001','5C383BFB439F0001','DC383BFB439F0001','3C383BFB439F0001','BC383BFB439F0001','7C383BFB439F0001'),
stringsAsFactors = F)
get_iso11784_format(
c(df$isodecimal[1:2],df$isodothex[1:2],df$iso64bitleft[1:2],df$iso64bitright[1:2],c('1234567890123','ABD.4567890123'))
)
convert_to_isodecimal(df$isodecimal)
convert_to_isodecimal(df$isodothex)
library(ISO11784Tools)
convert_to_isodecimal(df$isodecimal)
df <- data.frame(isodecimal = c('999012345678901','999012345678902','999012345678903','999012345678904','999012345678905','999012345678906','999012345678907','999012345678908','999012345678909','999012345678910'),
isodothex = c('3E7.02DFDC1C35','3E7.02DFDC1C36','3E7.02DFDC1C37','3E7.02DFDC1C38','3E7.02DFDC1C39','3E7.02DFDC1C3A','3E7.02DFDC1C3B','3E7.02DFDC1C3C','3E7.02DFDC1C3D','3E7.02DFDC1C3E'),
iso64bitleft = c('8000F9C2DFDC1C35','8000F9C2DFDC1C36','8000F9C2DFDC1C37','8000F9C2DFDC1C38','8000F9C2DFDC1C39','8000F9C2DFDC1C3A','8000F9C2DFDC1C3B','8000F9C2DFDC1C3C','8000F9C2DFDC1C3D','8000F9C2DFDC1C3E'),
iso64bitright = c('AC383BFB439F0001','6C383BFB439F0001','EC383BFB439F0001','1C383BFB439F0001','9C383BFB439F0001','5C383BFB439F0001','DC383BFB439F0001','3C383BFB439F0001','BC383BFB439F0001','7C383BFB439F0001'),
stringsAsFactors = F)
convert_to_isodecimal(df$isodecimal)
convert_to_isodecimal(df$isodothex)
convert_to_isodecimal(df$isodothex, format = 'isodothex')
isodecimal_to_isodothex(df$isodothex)
isodothex_to_isodecimal(isodecimal_to_isodothex(df$isodothex))
library(ISO11784Tools)
get_iso11784_format(NA)
get_iso11784_format(0)
get_iso11784_format(1)
get_iso11784_format(NA)
get_iso11784_format(989000000123456)
get_iso11784_format('989000000123456')
library(ISO11784Tools)
library(ISO11784Tools)
testdata <- readr::readr_csv('testdata_30k.csv')
testdata <- readr::read_csv('testdata_30k.csv')
testdata <- readr::read_csv('testdata_30k.csv',col_types = 'cddccccccccccc')
testdata
ISO11784Tools::get_iso11784_format(testdata$tag_id_code)
ISO11784Tools::get_iso11784_format(testdata$tag_id_code) != "isodothex"
formatTest <- ISO11784Tools::get_iso11784_format(testdata$tag_id_code) != "isodothex"
formatTest
formatTest[formatTest]
formatTest[!formatTest]
formatTest <- ISO11784Tools::get_iso11784_format(testdata$tag_id_code) == "isodothex"
formatTest[!formatTest]
formatTest[!formatTest]
formatTest[!formatTest] <- NA
formatTest
testdata[formatTest]
testdata[formatTest,]
testdata
testdata[!formatTest,]
formatTest <- ISO11784Tools::get_iso11784_format(testdata$tag_id_code) == "isodothex"
formatTest
testdata[formatTest,]
testdata$tag_id_code[formatTest]
out <- ISO11784Tools::get_iso11784_format(testdata$tag_id_code) == "isodothex"
out[out] <- testdata$tag_id_code[out]
out[!out] <- NA
out
View(out)
out <- ISO11784Tools::get_iso11784_format(testdata$tag_id_code) == "isodothex"
out[!out] <- NA
out[out] <- testdata$tag_id_code[out]
testdata$tag_id_code
formatTest <- ISO11784Tools::get_iso11784_format(testdata$tag_id_code) == "isodothex"
formatTest
out <- testdata
out <- testdata$tag_id_code
out
out[formatTest]
out[!formatTest]
out[!formatTest] <- NA
out[!formatTest]
out[formatTest]
out[formatTest] %>% stringr::str_split('\\.',simplify = T)
library(magrittr)
out[formatTest] %>% stringr::str_split('\\.',simplify = T)
out[formatTest] %>% stringr::str_split('\\.',simplify = T)[1]
out[formatTest] %>% stringr::str_split('\\.',simplify = T)[[1]]
out[formatTest] %>% stringr::str_split('\\.',simplify = T)
out[formatTest] <- out[formatTest] %>% stringr::str_split('\\.',simplify = T)
out[formatTest] <- out[formatTest] %>% stringr::str_split('\\.',simplify = F)
out[formatTest]
View(out)
testdata$tag_id_code[formatTest]
out[formatTest] %>% stringr::str_split('\\.',simplify = F)
formatTest
out <- testdata$tag_id_code
out
out[!formatTest] <- NA
manufacturer <- out
animalID <- out
manufacturer[formatTest] <- manufacturer[formatTest] %>% stringr::str_split(i,'\\.',simplify = T)[1]
manufacturer[formatTest] <- manufacturer[formatTest] %>% stringr::str_split('\\.',simplify = T)[1]
manufacturer[formatTest]
manufacturer[formatTest] <- manufacturer[formatTest] %>% stringr::str_split(pattern = '\\.',simplify = T)[1]
out[formatTest] %>% stringr::str_split('\\.',simplify = F)
manufacturer
manufacturer[formatTest]
manufacturer[formatTest] %>% stringr::str_split(pattern = '\\.',simplify = T)[1]
manufacturer[formatTest] %>% stringr::str_split(pattern = '\\.',simplify = T)
manufacturer[formatTest] %>% stringr::str_split(pattern = '\\.',simplify = T)[,1]
manufacturer[formatTest] %>% stringr::str_split(pattern = '\\.',simplify = T)
stringr::str_split(manufacturer[formatTest],pattern = '\\.',simplify = T)
stringr::str_split(manufacturer[formatTest],pattern = '\\.',simplify = T)[1]
stringr::str_split(manufacturer[formatTest],pattern = '\\.',simplify = T)[,1]
manufacturer[formatTest] <-  stringr::str_split(manufacturer[formatTest],pattern = '\\.',simplify = T)[,1]
manufacturer[formatTest]
manufacturer[!formatTest]
animalID[formatTest] <-  stringr::str_split(animalID[formatTest],pattern = '\\.',simplify = T)[,2]
animalID[formatTest]
animalID[!formatTest]
ISO11784Tools::hexadecimal_to_decimal(manufacturer[formatTest])
manufacturer[formatTest] %>% ISO11784Tools::hexadecimal_to_decimal()
?lapply
out
out[formatTest]
manufacturer[formatTest]
lapply(manufacturer[formatTest],ISO11784Tools::hexadecimal_to_decimal)
manufacturer[formatTest]
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::hexadecimal_to_decimal)
manufacturer[formatTest]
manufacturer[!formatTest]
class(manufacturer)
as.vector(manufacturer)
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::hexadecimal_to_decimal)
animalID[formatTest]
animalID[formatTest]
animalID[formatTest] %>% stringr::str_pad(width = 12, side = 'left',pad = '0')
animalID[formatTest] <- animalID[formatTest] %>% stringr::str_pad(width = 12, side = 'left',pad = '0')
animalID[formatTest]
manufacturer[formatTest]
paste0(manufacturer[formatTest],animalID[formatTest])
out[formatTest] <- paste0(manufacturer[formatTest],animalID[formatTest])
View(out)
isodothex_to_isodecimal_new <- function(.data){
formatTest <- ISO11784Tools::get_iso11784_format(.data) == "isodothex"
out <- .data
out[!formatTest] <- NA
manufacturer <- out
animalID <- out
manufacturer[formatTest] <-  stringr::str_split(manufacturer[formatTest],pattern = '\\.',simplify = T)[,1]
animalID[formatTest] <-  stringr::str_split(animalID[formatTest],pattern = '\\.',simplify = T)[,2]
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::hexadecimal_to_decimal)
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::hexadecimal_to_decimal)
animalID[formatTest] <- animalID[formatTest] %>% stringr::str_pad(width = 12, side = 'left',pad = '0')
out[formatTest] <- paste0(manufacturer[formatTest],animalID[formatTest])
out
}
t0 <- Sys.time()
ISO11784Tools::isodothex_to_isodecimal(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
isodothex_to_isodecimal_new(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
test1 <- ISO11784Tools::isodothex_to_isodecimal(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
test2 <- isodothex_to_isodecimal_new(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
test1 == test2
testthat::expect_equal(test1,test2)
test1
test2
library(ISO11784Tools)
library(ISO11784Tools)
isodothex_to_isodecimal_new <- function(.data){
formatTest <- ISO11784Tools::get_iso11784_format(.data) == "isodothex"
out <- .data
out[!formatTest] <- NA
manufacturer <- out
animalID <- out
manufacturer[formatTest] <-  stringr::str_split(manufacturer[formatTest],pattern = '\\.',simplify = T)[,1]
animalID[formatTest] <-  stringr::str_split(animalID[formatTest],pattern = '\\.',simplify = T)[,2]
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::hexadecimal_to_decimal)
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::hexadecimal_to_decimal)
animalID[formatTest] <- animalID[formatTest] %>% stringr::str_pad(width = 12, side = 'left',pad = '0')
out[formatTest] <- paste0(manufacturer[formatTest],animalID[formatTest])
out
}
t0 <- Sys.time()
test1 <- ISO11784Tools::isodothex_to_isodecimal(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
test2 <- isodothex_to_isodecimal_new(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
formatTest
test1[formatTest]
test2[formatTest]
test2[!formatTest]
test1[!formatTest]
class(test1)
class(test2)
length(test1)
length(test2)
isodothex_to_isodecimal_new <- function(.data){
formatTest <- ISO11784Tools::get_iso11784_format(.data) == "isodothex"
out <- .data
out[!formatTest] <- NA
manufacturer <- out
animalID <- out
manufacturer[formatTest] <-  stringr::str_split(manufacturer[formatTest],pattern = '\\.',simplify = T)[,1]
animalID[formatTest] <-  stringr::str_split(animalID[formatTest],pattern = '\\.',simplify = T)[,2]
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::hexadecimal_to_decimal)
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::hexadecimal_to_decimal)
animalID[formatTest] <- animalID[formatTest] %>% stringr::str_pad(width = 12, side = 'left',pad = '0')
out[formatTest] <- paste0(manufacturer[formatTest],animalID[formatTest])
out
}
t0 <- Sys.time()
test2 <- isodothex_to_isodecimal_new(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
testdata <- readr::read_csv('testdata_30k.csv',col_types = 'cddccccccccccc')
t0 <- Sys.time()
test2 <- isodothex_to_isodecimal_new(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
test2
length(test2)
library(ISO11784Tools)
ISO11784Tools::isodothex_to_isodecimal
ISO11784Tools::isodothex_to_isodecimal('3DD.0001234567')
ISO11784Tools::isodothex_to_isodecimal('3DD.00012345671')
ISO11784Tools::isodothex_to_isodecimal(c('3DD.00012345671','3DD.0001234567'))
ISO11784Tools::isodothex_to_isodecimal(c('3DD.00012345671','3DD.00012345672'))
ISO11784Tools::isodothex_to_isodecimal(c('3DD.00012345671','3DD.00012345672','3DD.0001234567'))
library(ISO11784Tools)
ISO11784Tools::isodothex_to_isodecimal(c('3DD.00012345671','3DD.00012345672','3DD.0001234567'))
ISO11784Tools::isodothex_to_isodecimal(c('3DD.00012345671','3DD.00012345672'))
ISO11784Tools::isodothex_to_isodecimal
length(!is.na(c(NA,NA,NA)))
length(is.na(c(NA,NA,NA)))
all(is.na(c(NA,NA,NA)))
all(is.na(c(NA,NA,NA,1)))
all(is.na(c(NA,NA,NA,0)))
all(!is.na(c(NA,NA,NA,0)))
all(!is.na(c(NA,NA,NA)))
all(is.na(c(NA,NA,NA)))
!all(is.na(c(NA,NA,NA)))
!all(is.na(c(NA,NA,NA,1)))
library(ISO11784Tools)
ISO11784Tools::isodothex_to_isodecimal(c('3DD.00012345671','3DD.00012345672'))
ISO11784Tools::isodothex_to_isodecimal(c('3DD.00012345671','3DD.00012345672','3DD.0001234567'))
any(is.na(c(NA,NA,1)))
any(is.na(c(1,1,1)))
iso64bitleft_to_isodecimal_new <- function(.data){
formatTest <- ISO11784Tools::get_iso11784_format(.data) == "iso64bitl"
out <- .data
out[!formatTest] <- NA
if(!all(is.na(out))){
manufacturer <- out
animalID <- out
# extract manufacturer (left) and animal id (right) components
manufacturer[formatTest] <- stringr::str_sub(manufacturer[formatTest],5,7)
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::hexadecimal_to_binary)
manufacturer[formatTest] <- stringr::str_sub(manufacturer[formatTest],1,10)
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::binary_to_decimal)
animalID[formatTest] <- stringr::str_sub(animalID[formatTest],7,16)
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::hexadecimal_to_binary)
animalID[formatTest] <- stringr::str_sub(animalID[formatTest],3,40)
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::binary_to_decimal)
animalID[formatTest] <-  stringr::str_pad(animalID[formatTest],width = 12,pad = "0",side = 'left')
out[formatTest] <- paste0(manufacturer[formatTest],animalID[formatTest])
}
if(any(is.na(out))){
warning("Some or all items do not match iso64bitl format")
}
out
}
testdata <- readr::read_csv('testdata_30k.csv',col_types = 'cddccccccccccc')
test2 <- iso64bitleft_to_isodecimal_new(testdata$tag_id_code)
test2
tail(test2)
t0 <- Sys.time()
test1 <- ISO11784Tools::iso64bitleft_to_isodecimal(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
test2 <- iso64bitleft_to_isodecimal_new(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
library(ISO11784Tools)
iso64bitright_to_isodecimal_new <- function(.data){
formatTest <- ISO11784Tools::get_iso11784_format(.data) == "iso64bitr"
out <- .data
out[!formatTest] <- NA
if(!all(is.na(out))){
manufacturer <- out
animalID <- out
# extract manufacturer (left) and animal id (right) components
# left transformations and calculations
manufacturer[formatTest] <- stringr::str_sub(manufacturer[formatTest],5,7)
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::hexadecimal_to_binary)
manufacturer[formatTest] <- stringr::str_sub(manufacturer[formatTest],1,10)
manufacturer[formatTest] <- stringi::stri_reverse(manufacturer[formatTest])
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::binary_to_decimal)
#right transformations and calculations
animalID[formatTest] <- stringr::str_sub(animalID[formatTest],7,16)
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::hexadecimal_to_binary)
animalID[formatTest] <- stringr::str_sub(animalID[formatTest],3,40)
animalID[formatTest] <- stringi::stri_reverse(animalID[formatTest])
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::binary_to_decimal)
# Leading zero's are removed in this process and need added back on, animalID only
animalID[formatTest] <-  stringr::str_pad(animalID[formatTest],width = 12,pad = "0",side = 'left')
out[formatTest] <- paste0(manufacturer[formatTest],animalID[formatTest])
}
if(any(is.na(out))){
warning("Some or all items do not match iso64bitr format and will appear as NA")
}
out
}
testdata <- readr::read_csv('testdata_30k.csv',col_types = 'cddccccccccccc')
t0 <- Sys.time()
test1 <- ISO11784Tools::iso64bitright_to_isodecimal(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
t0 <- Sys.time()
test2 <- iso64bitright_to_isodecimal_new(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
iso64bitright_to_isodecimal_new <- function(.data){
formatTest <- ISO11784Tools::get_iso11784_format(.data) == "iso64bitr"
out <- .data
out[!formatTest] <- NA
if(!all(is.na(out))){
manufacturer <- out
animalID <- out
# extract manufacturer (left) and animal id (right) components
# left transformations and calculations
manufacturer[formatTest] <- stringr::str_sub(manufacturer[formatTest],5,7)
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::hexadecimal_to_binary)
manufacturer[formatTest] <- stringr::str_sub(manufacturer[formatTest],1,10)
manufacturer[formatTest] <- stringi::stri_reverse(manufacturer[formatTest])
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::binary_to_decimal)
#right transformations and calculations
animalID[formatTest] <- stringr::str_sub(animalID[formatTest],7,16)
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::hexadecimal_to_binary)
animalID[formatTest] <- stringr::str_sub(animalID[formatTest],3,40)
animalID[formatTest] <- stringi::stri_reverse(animalID[formatTest])
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::binary_to_decimal)
# Leading zero's are removed in this process and need added back on, animalID only
animalID[formatTest] <-  stringr::str_pad(animalID[formatTest],width = 12,pad = "0",side = 'left')
out[formatTest] <- paste0(manufacturer[formatTest],animalID[formatTest])
}
if(any(is.na(out))){
warning("Some or all items do not match iso64bitr format and will appear as NA")
}
out
}
t0 <- Sys.time()
test2 <- iso64bitright_to_isodecimal_new(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
test2
test2[!is.na(test2)]
test1[!is.na(test1)]
iso64bitright_to_isodecimal_new <- function(.data){
formatTest <- ISO11784Tools::get_iso11784_format(.data) == "iso64bitr"
out <- .data
out[!formatTest] <- NA
if(!all(is.na(out))){
manufacturer <- out
animalID <- out
# extract manufacturer (left) and animal id (right) components
# left transformations and calculations
manufacturer[formatTest] <- stringr::str_sub(manufacturer[formatTest],10,12)
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::hexadecimal_to_binary)
manufacturer[formatTest] <- stringr::str_sub(manufacturer[formatTest],3,12)
manufacturer[formatTest] <- stringi::stri_reverse(manufacturer[formatTest])
manufacturer[formatTest] <- lapply(manufacturer[formatTest],ISO11784Tools::binary_to_decimal)
#right transformations and calculations
animalID[formatTest] <- stringr::str_sub(animalID[formatTest],1,10)
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::hexadecimal_to_binary)
animalID[formatTest] <- stringr::str_sub(animalID[formatTest],1,38)
animalID[formatTest] <- stringi::stri_reverse(animalID[formatTest])
animalID[formatTest] <- lapply(animalID[formatTest],ISO11784Tools::binary_to_decimal)
# Leading zero's are removed in this process and need added back on, animalID only
animalID[formatTest] <-  stringr::str_pad(animalID[formatTest],width = 12,pad = "0",side = 'left')
out[formatTest] <- paste0(manufacturer[formatTest],animalID[formatTest])
}
if(any(is.na(out))){
warning("Some or all items do not match iso64bitr format and will appear as NA")
}
out
}
t0 <- Sys.time()
test2 <- iso64bitright_to_isodecimal_new(testdata$tag_id_code)
t1 <- Sys.time()
t1 - t0
test1[!is.na(test1)]
test2[!is.na(test2)]
library(ISO11784Tools)
library(ISO11784Tools)
ISO11784Tools::get_iso11784_format(c(NA,'989000012341234'))
ISO11784Tools::get_iso11784_format(c('989000012341235','989000012341234'))
ISO11784Tools::get_iso11784_format(c(NA,'989000012341235','989000012341234'))
ISO11784Tools::get_iso11784_format(c(NA,'989000012341235','989000012341234',NA))
ISO11784Tools::get_iso11784_format(c('989000012341235','989000012341234',NA))
id1 <- c('989000012341235','989000012341234',NA)
id2 <- c(NA,'989000012341235','989000012341234',NA)
id3 <- c('989000012341235','989000012341234')
ISO11784Tools::get_iso11784_format(id1)
ISO11784Tools::get_iso11784_format(id2)
ISO11784Tools::get_iso11784_format(id3)
tibble::as_tibble(id1)
tibble::as_tibble(id2)
tibble::as_tibble(id3)
get_iso11784_format_new <- function(.data){
ISOdothex <- "^[:xdigit:]{3}[\\.]{1}[:xdigit:]{10}$"
ISO64bitl <- "^8000[:xdigit:]{12}$" # 64 bits and animal tag bit on the left
ISO64bitr <- "^[:xdigit:]{12}0001$" # 64 bits and animal tag bit on the right
ISOdecimal <- "^[0-9]{15}$"
out <- tibble::as_tibble(.data)
out$format <- "unknown"
# capture basic format detection comparisons
out[stringr::str_detect(out$value,ISOdecimal),]$format <- 'isodecimal'
out[stringr::str_detect(out$value,ISOdothex),]$format <- 'isodothex'
out[stringr::str_detect(out$value,ISO64bitl),]$format <- 'iso64bitl'
out[stringr::str_detect(out$value,ISO64bitr),]$format <- 'iso64bitr'
# reset outsider cases back to unknown
out[out$format == 'isodecimal',][as.numeric(stringr::str_sub(out[out$format == 'isodecimal',]$value,4,-1)) > 274877906943,]$format <- 'unknown' # this number is the biggest 38 bit binary number, animal ID cannot be larger than 38 bits
out[out$format == 'isodothex',][as.hexmode(stringr::str_sub(out[out$format == 'isodothex',]$value,5,5)) > as.hexmode('3'),]$format <- 'unknown' # this number is the biggest 38 bit binary number, animal ID cannot be larger than 38 bits
out[out$format == 'iso64bitl',][!(stringr::str_detect(out[out$format == 'iso64bitl',]$value,"[a-fA-F]")),]$format <- 'unknown' # cautiously assume that 64bit hexadecimal should have at least 1 alpha character
out[out$format == 'iso64bitr',][!(stringr::str_detect(out[out$format == 'iso64bitr',]$value,"[a-fA-F]")),]$format <- 'unknown' # cautiously assume that 64bit hexadecimal should have at least 1 alpha character
out$format
}
get_iso11784_format_new(id3)
get_iso11784_format_new(id2)
ISOdothex <- "^[:xdigit:]{3}[\\.]{1}[:xdigit:]{10}$"
ISO64bitl <- "^8000[:xdigit:]{12}$" # 64 bits and animal tag bit on the left
ISO64bitr <- "^[:xdigit:]{12}0001$" # 64 bits and animal tag bit on the right
ISOdecimal <- "^[0-9]{15}$"
stringr::str_detect(id1,ISOdecimal)
stringr::str_detect(id1,ISOdecimal)
stringr::str_detect(id2,ISOdecimal)
stringr::str_detect(id3,ISOdecimal)
stringr::str_detect(c(NA,'989000012341235','989000012341234',NA),ISOdecimal)
stringr::str_detect(c(FALSE,'989000012341235','989000012341234',NA),ISOdecimal)
stringr::str_detect(c(FALSE,'989000012341235','989000012341234',FALSE),ISOdecimal)
id2
replace(is.na(id2),FALSE)
tibble::as_tibble(id2)
id4 <- tibble::as_tibble(id2)
id4[is.na(id4)] <- FALSE
id4
id4[is.na(id4)]$value <- FALSE
id3
id2
id2[is.na(id2)]
id2[is.na(id2)] <- FALSE
id2
tibble::as_tibble(id2)
get_iso11784_format_new <- function(.data){
ISOdothex <- "^[:xdigit:]{3}[\\.]{1}[:xdigit:]{10}$"
ISO64bitl <- "^8000[:xdigit:]{12}$" # 64 bits and animal tag bit on the left
ISO64bitr <- "^[:xdigit:]{12}0001$" # 64 bits and animal tag bit on the right
ISOdecimal <- "^[0-9]{15}$"
.data[is.na(.data)] <- ""
out <- tibble::as_tibble(.data)
out$format <- "unknown"
# capture basic format detection comparisons
out[stringr::str_detect(out$value,ISOdecimal),]$format <- 'isodecimal'
out[stringr::str_detect(out$value,ISOdothex),]$format <- 'isodothex'
out[stringr::str_detect(out$value,ISO64bitl),]$format <- 'iso64bitl'
out[stringr::str_detect(out$value,ISO64bitr),]$format <- 'iso64bitr'
# reset outsider cases back to unknown
out[out$format == 'isodecimal',][as.numeric(stringr::str_sub(out[out$format == 'isodecimal',]$value,4,-1)) > 274877906943,]$format <- 'unknown' # this number is the biggest 38 bit binary number, animal ID cannot be larger than 38 bits
out[out$format == 'isodothex',][as.hexmode(stringr::str_sub(out[out$format == 'isodothex',]$value,5,5)) > as.hexmode('3'),]$format <- 'unknown' # this number is the biggest 38 bit binary number, animal ID cannot be larger than 38 bits
out[out$format == 'iso64bitl',][!(stringr::str_detect(out[out$format == 'iso64bitl',]$value,"[a-fA-F]")),]$format <- 'unknown' # cautiously assume that 64bit hexadecimal should have at least 1 alpha character
out[out$format == 'iso64bitr',][!(stringr::str_detect(out[out$format == 'iso64bitr',]$value,"[a-fA-F]")),]$format <- 'unknown' # cautiously assume that 64bit hexadecimal should have at least 1 alpha character
out$format
}
get_iso11784_format_new(id1)
get_iso11784_format_new(id2)
get_iso11784_format_new(id3)
get_iso11784_format_new(c(NA,NA,NA))
library(ISO11784Tools)
out <- tibble::as_tibble(id2)
out
out <- tibble::as_tibble(id3)
out
out <- tibble::as_tibble(id1)
out
out[is.na(out)] <- ""
out
out$format <- "unknown"
out
library(ISO11784Tools)
library(ISO11784Tools)
?tibble::as_tibble
library(ISO11784Tools)
library(ISO11784Tools)
library(ISO11784Tools)
library(ISO11784Tools)
library(ISO11784Tools)
library(ISO11784Tools)
library(ISO11784Tools)
library(ISO11784Tools)
library(ISO11784Tools)
